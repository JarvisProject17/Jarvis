This is the general documentation for the JARVIS application.

How it works:
    The application files are contained within this one master folder. The main files that control what is displayed on the browser are inside of the javascripts
    folder which is inside of the public folder. These files do most of the data manipulation in order to form the maps and decide what information gets displayed
    and when. 

    The app.js file handles the functions that fetch and manipulate the data. It also determines the state of the program which in turn determines what 
    components are shown on the screen. This file uses angular syntax and calls the index.js file, the category.js file, and the glossary.js files.

    The category.js file controls all of the map and modal functionality. It creates the map based on what data is currently being passed into the file
    via the app.js file. The file dynamically generates the map and fills in the information associated with each state. The modals for each state are also 
    dynamically generated and are populated with information based on the state of the program and what data is being passed in. Each state is given the ability
    to toggle its respective modal, as is each state option in the dropdown menu. States that meet the selected filter option will have their id changed to
    reflect their selection status, and only those states will have hoverable information boxes and fully populated modals. These states will also be highlighted
    in orange to make them stand out.

    The glossary.js file dynamically creates the glossary which defines the UBI categories and program information used within the application.

    The style.css file contains some custome styling for the application. Although much of hte css styling comes from bootstrap, there are some specific styling
    features that have been added or overwritten.

    Within the routes folder are two files, index.js and query.js. These files facilitate data retrieval via connections to the underlying Access database. 
    
    Index.js contains all of the possible routes that can be entered via the app.js file. Each route fetches a different subset of data from the database, as each
    route has a different query associated with it. When a specific route is directed to, the file calls the query.js method which connects to the Access database.

    The query.js file connects to the Access database via an npm package. It takes in a specific query as a parameter and upon a successful connection to the 
    database, returns the requested information as a JSON string. If the connection to the database is unsuccessful, the file will output a line of text to the
    console indicating that the connection did not work. 

    The views folder contains the main html document for the application. This file contains meta information regarding the application as well as the base
    component and overall application structure. 
